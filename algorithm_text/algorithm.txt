This program generates shortest terminal string for the nonterminals in a grammar.

import functionality from Lark

function algorithm(Lark inGrammar, Lark larkGrammar){
    Creat a lark parser using grammar for lark and lakr library
    larkParser = Lark(larkGrammar)

    Use larkParser to parse inGrammar to get a parse tree
    tree = larkParser(inGrammar)

    Traverse the tree to convert it into a representation we can modify
    grammar = Lark.Transforme(tree)

    Remove cycles from the grammar
    transformedGrammar = removeCyclesFromGrammar(grammar)

    Generate shortest terminal string from transformedGrammar
    for nonterminal in transformedGrammar
        generateShortest(nonterminal)


}

function removeCyclesFromGrammar(grammar){
    Go through every nonterminal of the grammar to check if the
    nonterminal have one or more alternatives that don't contain cycles.
    If there is such an alternative, remove all alternatives that have cycles
    from the nonterminal.
    optional elements are not cycles.

    var transformedGrammar
    for nonterminal in grammar
        newNonterminal = transformeNonterminal(nonterminal)
        add newNonterminal to transformedGrammar
}

function transformeNonterminal(nonterminal){
    var newNonterminal
    for alternative in nonterminal
        if alternative do not contain cycle
            add it to newNonterminal
    
    // if there are no alternatives with cycles
    if newNonterminal is not empty
        return newNonterminal

    // if there are no alternative without cycles
    return nonterminal
}

function generateShortest(nonterminal){
    if nonterminal have multiple alternatives
        if there is alternatives that are a Token, Terminal or Regexp
            nonterminal = random one from these
        else
            nonterminal = random one from all alternatives

    if nonterminal is a Terminal
        return nonterminal
    
    else if nonterminal is a Regexp
        return generated regular expression from nonterminal
    
    else if nonterminal is a Sequence
        var terminalString
        for element in nonterminal
            terminalString += generateShortest(element)
        return terminalString
    
    else if nonterminal is Optional or Star
        return empty string
    
    else if nonterminal is Plus or other repetition
        return generateShortest(nonterminal) 

    else
        // Chain rule: A -> B
        return generateShortest(nonterminal)
}