QUESTIONS:
* Why is not_test and atom_expr in python grammar not changed?
    A long cycle?
    They change after transform_grammar() second call

* Why did we not use transform grammar 3?
    Not necessary

* verilog grammar contains cycles after calling transform_grammar one,
  but not after calling it twice.
    Same for python grammar

* Where can spaces be added so it ends up correct?
    Nowhere...
    Has to be added as a Token in the grammar   
  




TODO:
* terminal/literal/string
    * now:  "\"" -> \"
    * want: "\"" -> "
    * using str.replace('\\', '') to to it now
* regular expression
    * now return a word from a list of fruits

