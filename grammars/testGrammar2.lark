
// program: "program" SPACE CNAME SPACE "{" variable_decl+ SPACE statement+ "}"

// test: num+ "+" ("123" | (a))?
// lala_test : ("la" | test) ~ 1 .. 9
// test: (num | "abc")? "+"
start: program
     | variable_decl
     | statement
     | expr

program: "program" SPACE CNAME SPACE "{" SPACE (variable_decl ";" SPACE)+ (statement ";" SPACE)+ "}"

// c: variable_decl SPACE
// b: statement SPACE

variable_decl: "var" SPACE CNAME
             | "let" SPACE CNAME
             | "const" SPACE CNAME



statement: while_statement
         | if_then_statement
         | print_statement
         | assignment_statement
        //  | stmt_a



while_statement: "while" SPACE "(" SPACE expr SPACE ")" SPACE "{" SPACE (statement ";" SPACE)* SPACE "}"
            //    | ["do" "{" statement_2* "}"] "until" "(" expr ")"
// statement_2: statement_3
// statement_3: "HELLOA"//while_statement

// stmt_a: stmt_b | stmt_c | stmt_d
// stmt_b: "b" [stmt_a] stmt_a //| "b" stmt_a 
// stmt_c: "c" [stmt_a] 
// stmt_d: "d" [stmt_a] 



if_then_statement: "if" SPACE "(" SPACE expr SPACE ")" SPACE "{" SPACE (statement ";" SPACE)* SPACE "}"



print_statement: "print" SPACE expr



assignment_statement: CNAME SPACE "=" SPACE expr



expr: NUMBER
    | (expr _NEWLINE expr)
    | expr SPACE "+" SPACE expr
    | expr SPACE "-" SPACE expr
    | expr SPACE "*" SPACE expr
    | expr SPACE "/" SPACE expr
    | "(" expr ")"
    // | num+ "+" num*

// num : a* ".0" num? "x"
// a : "1"* | "2"*

// lala : "la" ~ 1 .. 9

SPACE: " "

_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+
COMMENT: /#[^\n]*/

// From GitHub:
// https://github.com/lark-parser/lark/blob/master/lark/grammars/common.lark
//
// Basic terminals for common use


//
// Numbers
//

DIGIT: "0".."9"
HEXDIGIT: "a".."f"|"A".."F"|DIGIT

INT: DIGIT+
SIGNED_INT: PLUS_MINUS? INT
DECIMAL: INT "." INT? | "." INT

// float = /-?\d+(\.\d+)?([eE][+-]?\d+)?/
_EXP: EXP2 SIGNED_INT
EXP2: "e"|"E"
FLOAT: INT _EXP | DECIMAL _EXP?
SIGNED_FLOAT: PLUS_MINUS? FLOAT

NUMBER: INT //FLOAT | INT
SIGNED_NUMBER: PLUS_MINUS? NUMBER

PLUS_MINUS: "+"|"-"

//
// Strings
//
_STRING_INNER: /.*?/
_STRING_ESC_INNER: _STRING_INNER /(?<!\\)(\\\\)*?/

ESCAPED_STRING : "\"" _STRING_ESC_INNER "\""


//
// Names (Variables)
//
LCASE_LETTER: "a".."z"
UCASE_LETTER: "A".."Z"

LETTER: UCASE_LETTER | LCASE_LETTER
WORD: LETTER+

CNAME: CNAME2 CNAME3*
CNAME2: "_"|LETTER
CNAME3: "_"|LETTER|DIGIT


//
// Whitespace
//
WS_INLINE: WS_INLINE2+
WS_INLINE2: " "|/\t/
WS: /[ \t\f\r\n]/+

CR : /\r/
LF : /\n/
NEWLINE: NEWLINE2+
NEWLINE2: CR? LF

// Comments
SH_COMMENT: /#[^\n]*/
CPP_COMMENT: /\/\/[^\n]*/
C_COMMENT: "/*" /(.|\n)*?/ "*/"
SQL_COMMENT: /--[^\n]*/

NAME: /[a-zA-Z_]\w*/

new_lala: "a" new_lala | du

du: new_lala | "b"